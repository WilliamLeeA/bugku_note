首先 id 不能为空

    第 1 行：限制 URL 查询字符串中必须有非空非零变量 id    ===> if(!$_GET['a']) + $id==0
    第 9 行：限制变量 $a 中不能含有字符 .
    第 15 行：要满足以下 5 条表达式才会爆 flag：
        变量 $data 弱等于字符串 bugku is a nice plateform!
        变量 $id 弱等于整型数 0
        变量 $b 的长度大于 5
        字符串 1114 要与字符串 111 连接变量 $b 的第一个字符构成的正则表达式匹配
        变量 $b 的第一个字符弱不等于整型数 4


1、源码中变量 $data 是由 file_get_contents() 函数读取变量 $a 的值而得，所以 $a 的值必须为数据流。

 在服务器中自定义一个内容为 bugku is a nice plateform! 文件，再把此文件路径赋值给 $a，显然不太现实。因此这里用伪协议 php:// 来访问输入输出的数据流，其中 php://input可以访问原始请求数据中的只读流。这里令 $a = "php://input"，并在请求主体中提交字符串 bugku is a nice plateform!。 直接写，不要键名



2、CTF 题做多了就知道 ereg() 函数或 eregi() 函数存在空字符截断漏洞，即参数中的正则表达式或待匹配字符串遇到空字符则截断丢弃后面的数据。

这儿注意 源码是 ===》 eregi("111".substr($b,0,1),"1114")   也就是 让自己补充检验条件   截断%00  ==》eregi("111","1114")  ==》 true

源码中待匹配字符串（第二个参数）已确定为 "1114"，正则表达式（第一个参数）由 "111" 连接 $b 的第一个字符组成，若令 substr($b,0,1) = "\x00"，即满足 "1114" 与 "111"匹配。因此，这里假设 $b = "\x0012345"，才能满足以上三个条件。